# 机器人几何参，如果机器人是圆形，设置 robot_radius,如果是其他形状设置 footprint
# robot_radius: 0.12 #圆形
footprint: [[-0.355, -0.470], [-0.355, 0.470], [0.355, 0.470], [0.355, -0.470]] #其他形状

# 障碍物层
obstacle_layer:
  
  enabled: true  # 是否启用该层
  combination_method: 1  # 只能设置为0或1，用来更新地图上的代价值，一般设置为1

  # 如果设置为false，那么地图上代价值就只分为致命碰撞和自由区域两种，如果设置为true，那么就分为致命碰撞，自由区域和未知区域三种。
  # 比如该参数设为false的话，意味着地图上的未知区域也被认为是可以自由移动的区域，这样在进行全局路径规划时，可以把一些未探索的未知区域也参与到路径规划
  # 如果你需要这样的话就将该参数设置为false。不过一般情况未探索的区域不应该当作可以自由移动的区域，因此一般将该参数设置为true
  track_unknown_space: true  # 是否允许探索未知区域，与global_planner_params.yaml文件中的allow_unknown参数一致，详细解释看上面

  # 设置机器人检测障碍物的最大范围，超过该范围的障碍物，并不进行检测，只有在该范围内才把该障碍物当作影响路径规划和移动的障碍物
  obstacle_range: 5.0  # 用于障碍物探测，比如: 值为 3.0，意味着检测到距离小于 3 米的障碍物时，就会引入代价地图

  # 在机器人移动过程中，实时清除代价地图上的障碍物的最大范围，更新可自由移动的空间数据。
  # 比如设为3米，意味着在3米内的障碍物，本来开始时是有的，但是本次检测却没有了，那么就需要在代价地图上来更新，将旧障碍物的空间标记为可以自由移动的空间
  raytrace_range: 10.0  # 用于清除障碍物，比如：值为 3.5，意味着清除代价地图中 3.5 米以外的障碍物

  # 导航包所需要的传感器
  observation_sources: scan
  # 对传感器的坐标系和数据进行配置。这个也会用于代价地图添加和清除障碍物。例如，你可以用激光雷达传感器用于在代价地图添加障碍物，再添加kinect用于导航和清除障碍物。
  scan: {sensor_frame: velodyne2, data_type: LaserScan, topic: scan, marking: true, clearing: true}

# 膨胀层
inflation_layer:
  # 膨胀半径，扩展在碰撞区域以外的代价区域，使得机器人规划路径避开障碍物，一般将该值设置为机器人底盘的直径大小
  inflation_radius: 1.2
  # 代价比例系数，越大则代价值越小
  cost_scaling_factor: 5.0

# 地图类型
map_type: costmap

# 静态地图层，即SLAM中构建的地图层
static_layer:
  enabled: true

